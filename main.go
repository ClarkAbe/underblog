package main

import (
	"fmt"
	"underblog/cmd"
	"underblog/internal"
	"path/filepath"
	"encoding/base64"
	"io/ioutil"
	"log"
	"os"
	"time"
)


var revision = "0.2.2"

func MkdirExistDir(v []string) (bool) {
	for _, path := range v {
		path, _ = filepath.Abs(path)
		if _, err := os.Stat(path); err != nil { // 检查路径是否存在
			if os.MkdirAll(path, os.ModePerm) != nil {
				return false
			}
		}
	}
	return true
}

func b64d(enc string)(string){
	decodeBytes, err := base64.StdEncoding.DecodeString(enc)
	if err != nil {
		return "base64 decode error!"
	}
	return string(decodeBytes)
}

func IsExist(path string)(bool){
	path, _ = filepath.Abs(path)
	_, err := os.Stat(path)
	return err != nil
}

func MkExistFile(v map[string]string) (o bool) {
	o = true
	for path, data := range v {
		path, _ = filepath.Abs(path)
		if _, err := os.Stat(path); err != nil {
			if ioutil.WriteFile(path, []byte(data), os.ModePerm) != nil {
				o = false
			}
		}
	}
	return o
}

func main() {
	fmt.Printf("Underblog %s\n", revision)
	MkdirExistDir([]string{"./src/markdown", "./src/static/js", "./src/static/css", "./src/static/images"})
	if IsExist("./src") {
		MkExistFile(map[string]string{
			"./src/index.html":b64d("CjwhRE9DVFlQRSBodG1sPgo8aHRtbD48aGVhZD4KICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04Ij4KICAgIDxtZXRhIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPTAiIG5hbWU9InZpZXdwb3J0Ij4KICAgIDxtZXRhIGNvbnRlbnQ9InllcyIgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZSI+CiAgICA8bWV0YSBjb250ZW50PSJibGFjayIgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZSI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJDYWNoZS1Db250cm9sIiBjb250ZW50PSJuby10cmFuc2Zvcm0iPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iQ2FjaGUtQ29udHJvbCIgY29udGVudD0ibm8tc2l0ZWFwcCI+CiAgICA8bWV0YSBjb250ZW50PSJ0ZWxlcGhvbmU9bm8iIG5hbWU9ImZvcm1hdC1kZXRlY3Rpb24iPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSIvc3RhdGljL2ltYWdlcy9waWMucG5nIiB0eXBlPSJpbWFnZS9wbmciLz4KICAgIDxtZXRhIG5hbWU9InJlbmRlcmVyIiBjb250ZW50PSJ3ZWJraXQiPgogICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9IkFyY2hMaW51eCwgQ2xhcmtRQVEsIOS4quS6uuWNmuWuoiwgQmxvZywgQ29kZSI+Cgk8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0ie3sgQmxvZ0xpbmsgYGh0dHA6Ly9leGFtcGxlLmNvbWAgfX0iPgoJPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9Int7IEJsb2dEZXNjcmlwdGlvbiBgQmxvZyBhYm91dCB1bmRlcmJsb2dgIH19Ij4KICAgIDx0aXRsZT57eyBCbG9nVGl0bGUgIkNsYXJrJ3MgQmxvZyIgfX08L3RpdGxlPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc3RhdGljL2Nzcy9zdHlsZS5jc3MiPgo8L2hlYWQ+Cjxib2R5Pgo8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgIDxoZWFkZXI+CiAgICAgICAgPGEgaHJlZj0iLyIgY2xhc3M9ImxvZ28iPjxpbWcgc3JjPSIvc3RhdGljL2ltYWdlcy91c2VyLWhlYWQtaW1hZ2UucG5nIiBhbHQ9IkNsYXJrJ3MgQmxvZyI+PC9hPgogICAgICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgPGgxPkNsYXJrJ3MgQmxvZzwvaDE+CiAgICAgICAgICAgIDxoMj7lnKjkuIDkuKrpmLPlhYnmmI7lqprnmoTljYjlkI4s56qB54S25raI5aSxLOawuOi/nOa2iOWksS48L2gyPgogICAgICAgICAgICA8bmF2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYml0Y3Jvbl9uYXZfY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiaXRjcm9uX25hdiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1peGVkX3NpdGVfbmF2X3dyYXAgc2l0ZV9uYXZfd3JhcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im1peGVkX3NpdGVfbmF2IHNpdGVfbmF2IHNtIHNtLWJhc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiBjbGFzcz0ic2VsZWN0ZWQgYWN0aXZlIGN1cnJlbnQgbmF2X19pdGVtIj7pppbpobU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KPCEtLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vMTI3LjAuMC4xOjgwODAvYXJjaGl2ZSIgY2xhc3M9IiBuYXZfX2l0ZW0iPuW9kuahozwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwOi8vMTI3LjAuMC4xOjgwODAvYWRtaW4iIGNsYXNzPSIgbmF2X19pdGVtIj7nrqHnkIY8L2E+PC9saT4KLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIgY2xlYXJfbmF2X2lubGluZV9lbmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIGNsZWFyX25hdl9lbmQiPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvbmF2PgogICAgICAgIDwvZGl2PgogICAgPC9oZWFkZXI+CgogICAgPG1haW4+CiAgICA8c2VjdGlvbiBjbGFzcz0iYXJ0aWNsZS1saXN0Ij4KCXt7IHJhbmdlIC4gfX0KICAgICAgICA8YXJ0aWNsZT4KICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wb3N0cy97eyAuU2x1ZyB9fS8iPnt7IC5UaXRsZSB9fTwvYT4KICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZXhjZXJwdCI+CiAgICAgICAgICAgICAgICA8cD48L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZXRhIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpdGVtIj7ml6XmnJ86PC9pPjx0aW1lPnt7IC5EYXRlLkZvcm1hdCAiMjAwNi0wMS0wMiIgfX08L3RpbWU+PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2FydGljbGU+Cgl7eyBlbmQgfX0KICAgIDwvc2VjdGlvbj4KPC9tYWluPgo8L2Rpdj4KCgogICAgPGZvb3Rlcj4KICAgICAgICA8c3Bhbj5DbGFya1FBUSAtIOKZpTwvc3Bhbj4KICAgICAgICA8ZGl2PuWPi+aDhemTvuaOpToKICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly9ibG9nLmNsYXJhcXdxLmNvbS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iQ2xhcmFRV1HnmoTljZrlrqIiPkNsYXJhPC9hPgoJCTwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InBvd2VyZWRfYnkiPgogICAgICAgICAgICA8c3Bhbj7CqSBDb3B5UmlnaHQ8L3NwYW4+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly9jbGFya2FiZS50b3AvIiB0YXJnZXQ9Il9ibGFuayI+Q2xhcmtRQVE8L2E+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiIHRhcmdldD0iX2JsYW5rIj5GYW50YXN5PC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlcl9zbG9nYW4iPgogICAgICAgIDwvZGl2PgogICAgPC9mb290ZXI+CiAgICA8c2NyaXB0PgoJCShmdW5jdGlvbigpIHsKCQkJdmFyIE9yaWdpblRpdGxlID0gZG9jdW1lbnQudGl0bGU7CgkJCXZhciB0aXRsZVRpbWU7CgkJCWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBmdW5jdGlvbiAoKSB7CgkJCQlpZiAoZG9jdW1lbnQuaGlkZGVuKSB7CgkJCQkJZG9jdW1lbnQudGl0bGUgPSAi5ZaU5ZS3LOW0qea6g+WVpiEiOwoJCQkJCWNsZWFyVGltZW91dCh0aXRsZVRpbWUpOwoJCQkJfWVsc2UgewoJCQkJCWRvY3VtZW50LnRpdGxlID0gIuivtiE9dz3lj4jlpb3kuoYhIjsKCQkJCQl0aXRsZVRpbWUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKCQkJCQkJZG9jdW1lbnQudGl0bGUgPSBPcmlnaW5UaXRsZTsKCQkJCQl9LCAyMDAwKTsKCQkJCX0KCQkJfSk7CgkJIH0oKSk7CiAgICA8L3NjcmlwdD4KCjwvYm9keT4="),
			"./src/post.html":b64d("CjwhRE9DVFlQRSBodG1sPgo8aHRtbD4KPGhlYWQ+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD11dGYtOCI+CiAgICA8bWV0YSBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCwgdXNlci1zY2FsYWJsZT0wIiBuYW1lPSJ2aWV3cG9ydCIvPgogICAgPG1ldGEgY29udGVudD0ieWVzIiBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIi8+CiAgICA8bWV0YSBjb250ZW50PSJibGFjayIgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZSIvPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iQ2FjaGUtQ29udHJvbCIgY29udGVudD0ibm8tdHJhbnNmb3JtIi8+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJDYWNoZS1Db250cm9sIiBjb250ZW50PSJuby1zaXRlYXBwIi8+CiAgICA8bWV0YSBjb250ZW50PSJ0ZWxlcGhvbmU9bm8iIG5hbWU9ImZvcm1hdC1kZXRlY3Rpb24iLz4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvcGljLnBuZyIgdHlwZT0iaW1hZ2UvcG5nIi8+CiAgICA8bWV0YSBuYW1lPSJyZW5kZXJlciIgY29udGVudD0id2Via2l0Ij4KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSIiPgogICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9IkFyY2hMaW51eCwgQ2xhcmtRQVEsIOS4quS6uuWNmuWuoiwgQmxvZywgQ29kZSI+CiAgICA8dGl0bGU+e3sgLlRpdGxlIH19IC0gQ2xhcmsmIzM5O3MgQmxvZzwvdGl0bGU+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zdGF0aWMvY3NzL3N0eWxlLmNzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9zdGF0aWMvY3NzL3N0cmFwZG93bi5jc3MiPgo8L2hlYWQ+Cjxib2R5Pgo8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgIDxoZWFkZXI+CiAgICAgICAgPGEgaHJlZj0iLyIgY2xhc3M9ImxvZ28iPjxpbWcgc3JjPSIvc3RhdGljL2ltYWdlcy91c2VyLWhlYWQtaW1hZ2UucG5nIiBhbHQ9IkNsYXJrJiMzOTtzIEJsb2ciLz48L2E+CiAgICAgICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgICAgICA8aDE+Q2xhcmsmIzM5O3MgQmxvZzwvaDE+CiAgICAgICAgICAgIDxoMj7lnKjkuIDkuKrpmLPlhYnmmI7lqprnmoTljYjlkI4s56qB54S25raI5aSxLOawuOi/nOa2iOWksS48L2gyPgogICAgICAgICAgICA8bmF2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYml0Y3Jvbl9uYXZfY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiaXRjcm9uX25hdiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1peGVkX3NpdGVfbmF2X3dyYXAgc2l0ZV9uYXZfd3JhcCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im1peGVkX3NpdGVfbmF2IHNpdGVfbmF2IHNtIHNtLWJhc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIiBjbGFzcz0ic2VsZWN0ZWQgYWN0aXZlIGN1cnJlbnQgbmF2X19pdGVtIj7pppbpobU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KPCEtLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYXJjaGl2ZSIgY2xhc3M9IiBuYXZfX2l0ZW0iPuW9kuahozwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvYWRtaW4iIGNsYXNzPSIgbmF2X19pdGVtIj7nrqHnkIY8L2E+PC9saT4KLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2xlYXIgY2xlYXJfbmF2X2lubGluZV9lbmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNsZWFyIGNsZWFyX25hdl9lbmQiPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvbmF2PgogICAgICAgIDwvZGl2PgogICAgPC9oZWFkZXI+CgogICAgPG1haW4+CjxhcnRpY2xlIGNsYXNzPSJjb250ZW50Ij4KCiAgICA8aDE+e3sgLlRpdGxlIH19PC9oMT4KICAgIDxkaXYgY2xhc3M9Im1ldGEiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iaXRlbSI+5pel5pyfOjx0aW1lPnt7IC5EYXRlLkZvcm1hdCAiMjAwNi0wMS0wMiIgfX08L3RpbWU+PC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJpdGVtIj7moIfnrb466buY6K6kKOacquWunueOsCk8L3NwYW4+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InBvc3QiPgogICAgICAgIDxkaXYgY2xhc3M9Im1kX2Jsb2NrIiBpZD0ibWFya2Rvd24iPgoKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2FydGljbGU+CiAgICA8c2NyaXB0IHNyYz0iL3N0YXRpYy9qcy9zdHJhcGRvd24uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdD4KCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFya2Rvd24iKS5pbm5lckhUTUwgPSAie3sgLkJvZHkgfX0iOwoJCW1hcmtkb3duKCJtYXJrZG93biIpOwoJPC9zY3JpcHQ+CjwvbWFpbj4KPC9kaXY+CiAgICA8Zm9vdGVyPgogICAgICAgIDxzcGFuPkNsYXJrUUFRIC0g4pmlPC9zcGFuPgogICAgICAgIDxkaXY+5Y+L5oOF6ZO+5o6lOgogICAgICAgIDxhIGhyZWY9Imh0dHA6Ly9ibG9nLmNsYXJhcXdxLmNvbS8iIHRhcmdldD0iX2JsYW5rIiB0aXRsZT0iQ2xhcmFRV1HnmoTljZrlrqIiPkNsYXJhPC9hPgoJCTwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InBvd2VyZWRfYnkiPgogICAgICAgICAgICA8c3Bhbj7CqSBDb3B5UmlnaHQ8L3NwYW4+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly9jbGFya2FiZS50b3AiIHRhcmdldD0iX2JsYW5rIj5DbGFya1FBUTwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGFyZ2V0PSJfYmxhbmsiPkZhbnRhc3k8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyX3Nsb2dhbiI+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvb3Rlcj4KCiAgICA8c2NyaXB0PgoJCShmdW5jdGlvbigpIHsKCQkJdmFyIE9yaWdpblRpdGxlID0gZG9jdW1lbnQudGl0bGU7CgkJCXZhciB0aXRsZVRpbWU7CgkJCWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBmdW5jdGlvbiAoKSB7CgkJCQlpZiAoZG9jdW1lbnQuaGlkZGVuKSB7CgkJCQkJZG9jdW1lbnQudGl0bGUgPSAi5ZaU5ZS3LOW0qea6g+WVpiEiOwoJCQkJCWNsZWFyVGltZW91dCh0aXRsZVRpbWUpOwoJCQkJfWVsc2UgewoJCQkJCWRvY3VtZW50LnRpdGxlID0gIuivtiE9dz3lj4jlpb3kuoYhIjsKCQkJCQl0aXRsZVRpbWUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKCQkJCQkJZG9jdW1lbnQudGl0bGUgPSBPcmlnaW5UaXRsZTsKCQkJCQl9LCAyMDAwKTsKCQkJCX0KCQkJfSk7CgkJIH0oKSk7CiAgICA8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+"),
			"./src/static/css/style.css":b64d(""),
			"./src/static/css/strapdown.css":b64d("LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKClRoaXMgY2h1bmsgaXMgdG8gZml4IEJvb3RzdHJhcCBzbyB0aGF0IHRoZSBNYXJrZG93biBvdXRwdXQgbG9va3MgZ29vZAoKKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCmJvZHkgewogICAgcGFkZGluZy10b3A6IDBweDsKICAgIHBhZGRpbmctYm90dG9tOiA0MHB4OwogICAgZm9udC1zaXplOiAxNXB4OwogICAgbGluZS1oZWlnaHQ6IDE1MCU7Cn0KCnhtcCwgdGV4dGFyZWEgewogICAgZGlzcGxheTogbm9uZTsKfQoKaDEsIGgyLCBoMywgaDQgewogICAgbWFyZ2luOiAxNXB4IDA7Cn0KCnByZSB7CiAgICBtYXJnaW46IDIwcHggMDsKfQoKaW1nIHsKICAgIG1hcmdpbjogMTBweCAwOwp9CgoubmF2YmFyIHsKICAgIHotaW5kZXg6IDE7Cn0KCi50YWJsZSB7CiAgICB3aWR0aDogYXV0bzsKfQoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKClRoaXMgY2h1bmsgaXMgZm9yIEdvb2dsZSdzIENvZGUgUHJldHRpZnk6Cmh0dHA6Ly9nb29nbGUtY29kZS1wcmV0dGlmeS5nb29nbGVjb2RlLmNvbQoKKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCi8qIFByZXR0eSBwcmludGluZyBzdHlsZXMuIFVzZWQgd2l0aCBwcmV0dGlmeS5qcy4gKi8KCi8qIFNQQU4gZWxlbWVudHMgd2l0aCB0aGUgY2xhc3NlcyBiZWxvdyBhcmUgYWRkZWQgYnkgcHJldHR5cHJpbnQuICovCi5wbG4gewogICAgY29sb3I6IGJsYWNrOwp9CgovKiBwbGFpbiB0ZXh0ICovCgpAbWVkaWEgc2NyZWVuIHsKICAgIC5zdHIgewogICAgICAgIGNvbG9yOiAjMDgwCiAgICB9CgogICAgLyogc3RyaW5nIGNvbnRlbnQgKi8KICAgIC5rd2QgewogICAgICAgIGNvbG9yOiAjMDA4CiAgICB9CgogICAgLyogYSBrZXl3b3JkICovCiAgICAuY29tIHsKICAgICAgICBjb2xvcjogIzgwMAogICAgfQoKICAgIC8qIGEgY29tbWVudCAqLwogICAgLnR5cCB7CiAgICAgICAgY29sb3I6ICM2MDYKICAgIH0KCiAgICAvKiBhIHR5cGUgbmFtZSAqLwogICAgLmxpdCB7CiAgICAgICAgY29sb3I6ICMwNjYKICAgIH0KCiAgICAvKiBhIGxpdGVyYWwgdmFsdWUgKi8KICAgIC8qIHB1bmN0dWF0aW9uLCBsaXNwIG9wZW4gYnJhY2tldCwgbGlzcCBjbG9zZSBicmFja2V0ICovCiAgICAucHVuLCAub3BuLCAuY2xvIHsKICAgICAgICBjb2xvcjogIzY2MAogICAgfQoKICAgIC50YWcgewogICAgICAgIGNvbG9yOiAjMDA4CiAgICB9CgogICAgLyogYSBtYXJrdXAgdGFnIG5hbWUgKi8KICAgIC5hdG4gewogICAgICAgIGNvbG9yOiAjNjA2CiAgICB9CgogICAgLyogYSBtYXJrdXAgYXR0cmlidXRlIG5hbWUgKi8KICAgIC5hdHYgewogICAgICAgIGNvbG9yOiAjMDgwCiAgICB9CgogICAgLyogYSBtYXJrdXAgYXR0cmlidXRlIHZhbHVlICovCiAgICAuZGVjLCAudmFyIHsKICAgICAgICBjb2xvcjogIzYwNgogICAgfQoKICAgIC8qIGEgZGVjbGFyYXRpb247IGEgdmFyaWFibGUgbmFtZSAqLwogICAgLmZ1biB7CiAgICAgICAgY29sb3I6IHJlZAogICAgfQoKICAgIC8qIGEgZnVuY3Rpb24gbmFtZSAqLwp9CgovKiBVc2UgaGlnaGVyIGNvbnRyYXN0IGFuZCB0ZXh0LXdlaWdodCBmb3IgcHJpbnRhYmxlIGZvcm0uICovCkBtZWRpYSBwcmludCwgcHJvamVjdGlvbiB7CiAgICAuc3RyIHsKICAgICAgICBjb2xvcjogIzA2MAogICAgfQoKICAgIC5rd2QgewogICAgICAgIGNvbG9yOiAjMDA2OwogICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkCiAgICB9CgogICAgLmNvbSB7CiAgICAgICAgY29sb3I6ICM2MDA7CiAgICAgICAgZm9udC1zdHlsZTogaXRhbGljCiAgICB9CgogICAgLnR5cCB7CiAgICAgICAgY29sb3I6ICM0MDQ7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQKICAgIH0KCiAgICAubGl0IHsKICAgICAgICBjb2xvcjogIzA0NAogICAgfQoKICAgIC5wdW4sIC5vcG4sIC5jbG8gewogICAgICAgIGNvbG9yOiAjNDQwCiAgICB9CgogICAgLnRhZyB7CiAgICAgICAgY29sb3I6ICMwMDY7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQKICAgIH0KCiAgICAuYXRuIHsKICAgICAgICBjb2xvcjogIzQwNAogICAgfQoKICAgIC5hdHYgewogICAgICAgIGNvbG9yOiAjMDYwCiAgICB9Cn0KCi8qIFB1dCBhIGJvcmRlciBhcm91bmQgcHJldHR5cHJpbnRlZCBjb2RlIHNuaXBwZXRzLiAqLwpwcmUucHJldHR5cHJpbnQgewogICAgcGFkZGluZzogMnB4OwogICAgYm9yZGVyOiAxcHggc29saWQgIzg4OAp9CgovKiBTcGVjaWZ5IGNsYXNzPWxpbmVudW1zIG9uIGEgcHJlIHRvIGdldCBsaW5lIG51bWJlcmluZyAqLwpvbC5saW5lbnVtcyB7CiAgICBtYXJnaW4tdG9wOiAwOwogICAgbWFyZ2luLWJvdHRvbTogMAp9CgovKiBJRSBpbmRlbnRzIHZpYSBtYXJnaW4tbGVmdCAqLwpsaS5MMCwKbGkuTDEsCmxpLkwyLApsaS5MMywKbGkuTDUsCmxpLkw2LApsaS5MNywKbGkuTDggewogICAgbGlzdC1zdHlsZS10eXBlOiBub25lCn0KCi8qIEFsdGVybmF0ZSBzaGFkaW5nIGZvciBsaW5lcyAqLwpsaS5MMSwKbGkuTDMsCmxpLkw1LApsaS5MNywKbGkuTDkgewogICAgYmFja2dyb3VuZDogI2VlZQp9Cgo="),
			"./src/static/js/strapdown.js":b64d(""),
		})
	}
	opts := internal.GetCLIOptions()

	if opts.Version {
		fmt.Printf("Current ver.: %s\n", revision)
		os.Exit(0)
	}

	if opts.WatchMode {
		fmt.Println("Starting in watch mode...")
		go makeBlog(opts)
		go internal.WatchForChangedFiles(func() { makeBlog(opts) })
		internal.RunDevelopmentWebserver()
	} else {
		fmt.Println("Starting...")
		makeBlog(opts)
	}
}

func makeBlog(opts internal.Opts) {
	start := time.Now()
	err := cmd.MakeBlog(opts)
	if err != nil {
		log.Fatalf("Can't make a blog: %v", err)
	}
	elapsed := time.Since(start)
	log.Printf("Done in %s", elapsed)
}
